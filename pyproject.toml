    [tool.poetry]
    name = "file_bot"
    version = "0.1.0"
    package-mode = false
    description = "Telegram bot for handling files and messages"
    authors = ["Alex <alexluni22@gmail.com>"]
    readme = "README.md"
    packages = [
        {include = "app", from = "."},
        {include = "config.py", from = "."},
        {include = "main.py", from = "."}
    ]


    [tool.poetry.dependencies]
    python = "3.12.11"
    aiogram = "3.2.0"
    asyncpg = "0.30.0"
    sqlalchemy = {extras = ["asyncio"], version = "2.0.0"}
    alembic = "1.13.1"
    apscheduler = "3.10.4"
    cachetools = "6.1.0"
    prometheus-client = "0.22.1"
    psutil = "7.0.0"
    python-dotenv = "1.0.0"
    pytz = "2023.3"

    [build-system]
    requires = ["poetry-core>=1.0.0"]
    build-backend = "poetry.core.masonry.api"

    [tool.poetry.group.dev.dependencies]
    ruff = "0.5.0"
    pytest = "8.3.5"
    pytest-asyncio = "0.26.0"
    mypy = "1.10.0"
    nitpick = "0.35.0"
    types-pytz = "2025.2.0.20250326"
    types-psutil = "7.0.0.20250601"
    types-cachetools = "6.1.0.20250717"
    pydantic = {version = "2.5.3", extras = ["mypy"]}

    [virtualenvs]
    in-project = true

    [tool.ruff]
    line-length = 120
    target-version = "py39"
    preview = true
    unsafe-fixes = true
    src = ["app"]
    extend-exclude = [
        "*/alembic/*",
        "texts.py",
        "alembic/env.py",
    ]

    [tool.ruff.lint]
    preview = true
    select = [
        "A",    # flake8-builtins
        "B",    # flake8-bugbear
        "C4",   # flake8-comprehensions
        "C90",  # maccabe
        "COM",  # flake8-commas
        "D",    # pydocstyle
        "DTZ",  # flake8-datetimez
        "E",    # pycodestyle
        "ERA",  # flake8-eradicate
        "EXE",  # flake8-executable
        "F",    # pyflakes
        "FBT",  # flake8-boolean-trap
        "FLY",  # pyflint
        "FURB", # refurb
        "G",    # flake8-logging-format
        "I",    # isort
        "ICN",  # flake8-import-conventions
        "ISC",  # flake8-implicit-str-concat
        "LOG",  # flake8-logging
        "N",    # pep8-naming
        "PERF", # perflint
        "PIE",  # flake8-pie
        "PL",   # pylint
        "PT",   # flake8-pytest-style
        "PTH",  # flake8-use-pathlib
        "Q",    # flake8-quotes
        "RET",  # flake8-return
        "RSE",  # flake8-raise
        "RUF",  # ruff
        "S",    # flake8-bandit
        "SIM",  # flake8-simplify
        "SLF",  # flake8-self
        "SLOT", # flake8-slots
        "T100", # flake8-debugger
        "TRY",  # tryceratops
        "UP",   # pyupgrade
        "W",    # pycodestyle
        "YTT",  # flake8-2020
    ]
    ignore = [
        "D100",    # Missing docstring in public module
        "D104",    # Missing docstring in public package
        "D105",    # Missing docstring in magic method
        "D106",    # Missing docstring in public nested class
        "D202",    # 1 blank line required before function docstring
        "D203",    # 1 blank line required before class docstring
        "D213",    # Multi-line docstring summary should start at the second line
        "PLR6201", # Use a set literal when testing for membership
        "RET504",  # Unnecessary variable assignment before `return` statement
        "RUF001",  # ruff unicode specific rules
        "RUF002",  # ruff unicode specific rules
        "RUF003",  # ruff unicode specific rules
        "TRY003",  # Avoid specifying long messages outside the exception class
        "TRY300",  # Use `raise from` to chain exceptions
    ]
    unfixable = [
        "B", # Avoid trying to fix flake8-bugbear violations.
        "ERA", # Avoid deleting commented-out code
    ]
    mccabe = { max-complexity = 10 }
    flake8-quotes = { inline-quotes = "single", multiline-quotes = "double" }
    flake8-tidy-imports = { ban-relative-imports = "all" }

    [tool.ruff.format]
    preview = true
    quote-style = "single"

    [tool.ruff.lint.per-file-ignores]
    "**/{test_*.py,tests/*.py,*/test/*.py}" = [
        "ANN401",  # typing.Any in tests
        "ARG001", "ARG002",  # unused args
        "D101", "D102", "D103", "D107",  # docstrings
        "ERA001",  # commented code
        "FBT001",  # boolean positional args
        "PLC0415", "PLR0913", "PLR0917", "PLR2004",  # test allowances
        "PTH108",  # os.unlink
        "S101", "S311"  # assert and random
    ]

    "{views,forms,admin,models,urls,serializers,widgets}.py" = [
        "D101", "D102", "D103", "D107"  # docstrings
    ]

    "**/{views,forms,admin,models,urls,serializers,widgets}/*.py" = [
        "D101", "D102", "D103", "D107"  # docstrings
    ]

    [tool.ruff.lint.isort]
    lines-after-imports = 2

    [tool.mypy]
    plugins = ["pydantic.mypy"]
    python_version = "3.12"
    files = ["app"]

    # Strictness options
    ignore_missing_imports = false
    disallow_any_explicit = true
    disallow_any_generics = true
    disallow_incomplete_defs = true
    disallow_untyped_calls = true
    disallow_untyped_defs = true
    no_implicit_optional = true
    strict_equality = true
    strict_optional = true

    # Warning controls
    warn_return_any = true
    warn_no_return = true
    warn_redundant_casts = true
    warn_unreachable = true
    warn_unused_configs = true
    warn_unused_ignores = true

    # Project structure
    allow_redefinition = false
    check_untyped_defs = true
    ignore_errors = false
    implicit_reexport = false
    local_partial_types = true

    exclude = [
        "alembic/",
        "tests/"
    ]

    [[tool.mypy.overrides]]
    module = "apscheduler.schedulers.asyncio"
    ignore_missing_imports = true
    
